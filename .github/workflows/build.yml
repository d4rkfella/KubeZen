name: Build KubeZen Executable

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'

      - name: Create staging directories for assets
        run: |
          mkdir -p ${{ github.workspace }}/staging_assets/bin
          mkdir -p ${{ github.workspace }}/staging_assets/assets_src/fzf_vim_plugin
          mkdir -p ${{ github.workspace }}/bin # For KubeZen.spec
          mkdir -p ${{ github.workspace }}/assets/fzf_vim_plugin/plugin
          mkdir -p ${{ github.workspace }}/assets/fzf_vim_plugin/fzf
        working-directory: ${{ github.workspace }}

      - name: Download kubectl
        run: bash ${{ github.workspace }}/assets/download_scripts/download_kubectl.sh ${{ github.workspace }}/staging_assets
        working-directory: ${{ github.workspace }}/assets/download_scripts

      - name: Download fzf suite (binary, vim plugin parts, fzf-tmux)
        run: bash ${{ github.workspace }}/assets/download_scripts/download_fzf_suite.sh ${{ github.workspace }}/staging_assets
        working-directory: ${{ github.workspace }}/assets/download_scripts

      - name: Build static tmux
        run: bash ${{ github.workspace }}/assets/build_scripts/build_static_tmux.sh ${{ github.workspace }}/staging_assets
        working-directory: ${{ github.workspace }}/assets/build_scripts

      - name: Build static vim
        run: bash ${{ github.workspace }}/assets/build_scripts/build_static_vim.sh
        # This script outputs to $PWD/vim_static_build, so it will create $GITHUB_WORKSPACE/KubeZen/vim_static_build
        working-directory: ${{ github.workspace }}

      - name: Populate KubeZen/bin for PyInstaller
        run: |
          echo "Copying binaries to KubeZen/bin/"
          cp ${{ github.workspace }}/staging_assets/bin/kubectl ${{ github.workspace }}/bin/kubectl
          cp ${{ github.workspace }}/staging_assets/bin/fzf ${{ github.workspace }}/bin/fzf
          cp ${{ github.workspace }}/staging_assets/bin/fzf-tmux ${{ github.workspace }}/bin/fzf-tmux
          cp ${{ github.workspace }}/staging_assets/bin/tmux ${{ github.workspace }}/bin/tmux 
          ls -l ${{ github.workspace }}/bin/
        working-directory: ${{ github.workspace }}

      - name: Populate KubeZen/assets/fzf_vim_plugin for PyInstaller
        run: |
          echo "Copying fzf vim plugin files to KubeZen/assets/fzf_vim_plugin/"
          cp ${{ github.workspace }}/staging_assets/assets_src/fzf_vim_plugin/plugin/fzf.vim ${{ github.workspace }}/assets/fzf_vim_plugin/plugin/fzf.vim
          # Copy the entire fzf autoload directory and its contents
          if [ -d "${{ github.workspace }}/staging_assets/assets_src/fzf_vim_plugin/fzf/autoload" ]; then 
            cp -r ${{ github.workspace }}/staging_assets/assets_src/fzf_vim_plugin/fzf/autoload ${{ github.workspace }}/assets/fzf_vim_plugin/fzf/
          else
            echo "Warning: staging_assets/assets_src/fzf_vim_plugin/fzf/autoload not found"
          fi
          ls -lR ${{ github.workspace }}/assets/fzf_vim_plugin/
        working-directory: ${{ github.workspace }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pyinstaller
        working-directory: ${{ github.workspace }}

      - name: Run PyInstaller
        run: pyinstaller KubeZen.spec
        working-directory: ${{ github.workspace }}

      - name: List output directory
        run: ls -lR ${{ github.workspace }}/dist/
        working-directory: ${{ github.workspace }}

      - name: Upload KubeZen artifact
        uses: actions/upload-artifact@v4
        with:
          name: KubeZen-executable
          path: ${{ github.workspace }}/dist/kubezen
